/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.cluster_registry.pkg.apis.clusterregistry.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AuthInfo holds public information that describes how a client can get
// credentials to access the cluster. For example, OAuth2 client registration
// endpoints and supported flows, or Kerberos servers locations.
// 
// It should not hold any private or sensitive information.
message AuthInfo {
  // AuthProviders is a list of configurations for auth providers.
  // +optional
  repeated AuthProviderConfig providers = 1;
}

// AuthProviderConfig contains the information necessary for a client to
// authenticate to a Kubernetes API server. It is modeled after
// k8s.io/client-go/tools/clientcmd/api/v1.AuthProviderConfig.
message AuthProviderConfig {
  // Name is the name of this configuration.
  // +optional
  optional string name = 1;

  // Type contains type information about this auth provider. Clients of the
  // cluster registry should use this field to differentiate between different
  // kinds of authentication providers.
  // +optional
  optional AuthProviderType type = 2;

  // Config is a map of values that contains the information necessary for a
  // client to determine how to authenticate to a Kubernetes API server.
  // +optional
  map<string, string> config = 3;
}

// AuthProviderType contains metadata about the auth provider. It should be used
// by clients to differentiate between different kinds of auth providers, and to
// select a relevant provider for the client's configuration. For example, a
// controller would look for a provider type that denotes a service account
// that it should use to access the cluster, whereas a user would look for a
// provider type that denotes an authentication system from which they should
// request a token.
message AuthProviderType {
  // Name is the name of the auth provider.
  // +optional
  optional string name = 1;
}

// Cluster contains information about a cluster in a cluster registry.
message Cluster {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the specification of the cluster. This may or may not be
  // reconciled by an active controller.
  // +optional
  optional ClusterSpec spec = 2;

  // Status is the status of the cluster. It is optional, and can be left nil
  // to imply that the cluster status is not being reported.
  // +optional
  optional ClusterStatus status = 3;
}

// ClusterList is a list of Kubernetes clusters in the cluster registry.
message ClusterList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Cluster objects.
  repeated Cluster items = 2;
}

// ClusterSpec contains the specification of a cluster.
message ClusterSpec {
  // KubernetesAPIEndpoints represents the endpoints of the API server for this
  // cluster.
  // +optional
  optional KubernetesAPIEndpoints kubernetesApiEndpoints = 1;

  // AuthInfo contains public information that can be used to authenticate
  // to and authorize with this cluster. It is not meant to store private
  // information (e.g., tokens or client certificates) and cluster registry
  // implementations are not expected to provide hardened storage for
  // secrets.
  // +optional
  optional AuthInfo authInfo = 2;
}

// ClusterStatus contains the status of a cluster.
message ClusterStatus {
}

// KubernetesAPIEndpoints represents the endpoints for one and only one
// Kubernetes API server.
message KubernetesAPIEndpoints {
  // ServerEndpoints specifies the address(es) of the Kubernetes API serverâ€™s
  // network identity or identities.
  // +optional
  repeated ServerAddressByClientCIDR serverEndpoints = 1;

  // CABundle contains the certificate authority information.
  // +optional
  optional bytes caBundle = 2;
}

// ServerAddressByClientCIDR helps clients determine the server address that
// they should use, depending on the ClientCIDR that they match.
message ServerAddressByClientCIDR {
  // The CIDR with which clients can match their IP to figure out if they should
  // use the corresponding server address.
  // +optional
  optional string clientCIDR = 1;

  // Address of this server, suitable for a client that matches the above CIDR.
  // This can be a hostname, hostname:port, IP or IP:port.
  // +optional
  optional string serverAddress = 2;
}

